import{_ as e,M as o,p as c,q as l,Q as i,R as n,t as s,N as t,a1 as p}from"./framework-204010b2.js";const u={},r=n("h1",{id:"拼图游戏🧩",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#拼图游戏🧩","aria-hidden":"true"},"#"),s(" 拼图游戏🧩")],-1),k=n("p",null,"学习canvas做的小test",-1),d=n("p",null,"学习这个游戏的时候做了两个版本，笔记📒大部分是在学习中的学习笔记，在这里记录📝下来方便以后回温理解 基于webpack + typescript工程",-1),v=n("iframe",{id:"iframe",style:{width:"375px",height:"667px",position:"relative",border:"5px solid red"},frameborder:"0",allowfullscreen:"true",src:"http://127.0.0.1:5500/test2/clock.html"},`  
 `,-1),m=n("h2",{id:"git地址",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#git地址","aria-hidden":"true"},"#"),s(" git地址")],-1),b=n("p",null,[n("a",{href:"https://github.com/secret821/Mytest/tree/%E6%8B%BC%E5%9B%BE%E6%B8%B8%E6%88%8F"},"点击跳转")],-1),g=n("p",null,[n("a",{href:"https://github.com/secret821/Mytest/tree/%E6%8B%BC%E5%9B%BE%E6%B8%B8%E6%88%8FOOP"},"（oop）版点击跳转")],-1),y=n("h2",{id:"first-version",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#first-version","aria-hidden":"true"},"#"),s(" First version")],-1),f=n("p",null,"核心：拖动的实现 拖动是拼图游戏核心功能部分之一。下面是实现效果：",-1),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent",target:"_blank",rel:"noopener noreferrer"},w=p(`<p>对于移动游戏，触摸事件是最常用的用户交互事件类型。FYGE 为触摸事件设置了专门的触摸事件类FYGE.MouseEvent（详细API点击这里）</p><p>其包含的事件类型主要有：</p><p>MOUSE_DOWN：当用户第一次触摸启用触摸的设备时（例如，用手指触摸配有触摸屏的移动电话或平板电脑）触发 MOUSE_OUT：由于某个事件取消了触摸时触发 MOUSE_UP：当用户移除与启用触摸的设备的接触时（例如，将手指从配有触摸屏的移动电话或平板电脑上抬起）触发 MOUSE_MOVE：当用户触碰设备并移动时进行触发，而且会连续触发，直到接触点被删除 CLICK：当用户在触摸设备上与开始触摸的同一显示对象实例上抬起接触点时触发（相当与点击事件） 拖动的实现就是:</p><p>持续触发的鼠标移动事件回调中去更新图片的位置。 图片的位置应该是图片初始位置再加上鼠标的偏移量。 偏移量就是鼠标当前的位置与鼠标初始位置的差。 鼠标当前的位置可以通过MouseEvent.stageX和MouseEvent.stageY来获取。 以下是最终代码</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// import FYGE from fyge</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">addDragDemo</span> <span class="token operator">=</span> <span class="token punctuation">(</span>stage<span class="token operator">:</span><span class="token constant">FYGE</span><span class="token punctuation">.</span>Stage<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> pic <span class="token operator">=</span> <span class="token constant">FYGE</span><span class="token punctuation">.</span>Sprite<span class="token punctuation">.</span><span class="token function">fromUrl</span><span class="token punctuation">(</span><span class="token string">&#39;//yun.duiba.com.cn/aurora/assets/b64757cc9839c1dcc80692f6b7db9d97d269c315.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>pic<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//鼠标按下起始点</span>
    <span class="token keyword">let</span> startPoint<span class="token punctuation">;</span>
    <span class="token comment">//图片起始位置</span>
    <span class="token keyword">let</span> picOriginPos<span class="token punctuation">;</span>
 
    <span class="token keyword">const</span> <span class="token function-variable function">onStageMove</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token constant">FYGE</span><span class="token punctuation">.</span>MouseEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//鼠标当前位置</span>
        <span class="token keyword">const</span> currentPoint <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> event<span class="token punctuation">.</span>stageX<span class="token punctuation">,</span> y<span class="token operator">:</span> event<span class="token punctuation">.</span>stageY <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">//鼠标按下点到鼠标当前点的偏移量</span>
        <span class="token keyword">let</span> mouseOffsetX <span class="token operator">=</span> currentPoint<span class="token punctuation">.</span>x <span class="token operator">-</span> startPoint<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
        <span class="token keyword">let</span> mouseOffsetY <span class="token operator">=</span> currentPoint<span class="token punctuation">.</span>y <span class="token operator">-</span> startPoint<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
 
        pic<span class="token punctuation">.</span>x <span class="token operator">=</span> picOriginPos<span class="token punctuation">.</span>x <span class="token operator">+</span> mouseOffsetX<span class="token punctuation">;</span>
        pic<span class="token punctuation">.</span>y <span class="token operator">=</span> picOriginPos<span class="token punctuation">.</span>y <span class="token operator">+</span> mouseOffsetY<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">const</span> <span class="token function-variable function">onMouseUp_pic</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//鼠标抬起后应该移出舞台移动事件，否则会重复添加事件</span>
        stage<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token constant">FYGE</span><span class="token punctuation">.</span>MouseEvent<span class="token punctuation">.</span><span class="token constant">MOUSE_MOVE</span><span class="token punctuation">,</span> onStageMove<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">const</span> <span class="token function-variable function">onMouseDown_pic</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token constant">FYGE</span><span class="token punctuation">.</span>MouseEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//图片鼠标弹起事件，事件触发一次即移除，否则会重复添加鼠标弹起事件</span>
        pic<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token constant">FYGE</span><span class="token punctuation">.</span>MouseEvent<span class="token punctuation">.</span><span class="token constant">MOUSE_UP</span><span class="token punctuation">,</span> onMouseUp_pic<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//添加舞台移动事件，鼠标移动即触发</span>
        <span class="token comment">//FYGE.MouseEvent.MOUSE_MOVE 会在鼠标移动过程中触发</span>
        stage<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token constant">FYGE</span><span class="token punctuation">.</span>MouseEvent<span class="token punctuation">.</span><span class="token constant">MOUSE_MOVE</span><span class="token punctuation">,</span> onStageMove<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//event事件对象</span>
        <span class="token comment">//event.stageX，event.stageY当前鼠标在舞台的位置</span>
        startPoint <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> event<span class="token punctuation">.</span>stageX<span class="token punctuation">,</span> y<span class="token operator">:</span> event<span class="token punctuation">.</span>stageY <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
        picOriginPos <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> pic<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token operator">:</span> pic<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment">//增加鼠标按下事件</span>
    pic<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token constant">FYGE</span><span class="token punctuation">.</span>MouseEvent<span class="token punctuation">.</span><span class="token constant">MOUSE_DOWN</span><span class="token punctuation">,</span> onMouseDown_pic<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),_={href:"http://gitlab2.dui88.com/fyge/puzzle/tree/drag",target:"_blank",rel:"noopener noreferrer"},E={href:"http://duiba.oss-cn-hangzhou.aliyuncs.com/db_games/fyge/puzzle-drag/index.html",target:"_blank",rel:"noopener noreferrer"},D=p(`<p>多图拖动 拖动是拼图游戏核心功能部分之一。下面是实现效果：</p><p>因为所有图片碎片的事件处理方法都是一样的，所以它们应该公用事件回调函数。那么如何区分不同的碎片对象呢？</p><p>这就需要用到FYGE.MouseEvent事件对象的target和currentTarget属性（API详情点这）:</p><p>target即事件目标。此属性包含目标节点。例如，如果用户单击“确定”按钮，则目标节点就是包含该按钮的显示列表节点。 currentTarget，即当前正在使用某个事件侦听器处理 Event 对象的对象。例如，如果用户单击“确定”按钮，则当前目标可以是包含该按钮的节点，也可以是它的已为该事件注册了事件侦听器的始祖之一。 target和currentTarget选其一即可，在鼠标事件中触发事件的目标都是碎片显示对象。更多区别敬请期待后续讲解。</p><p>代码其实改动并不大：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">addDragDemo</span> <span class="token operator">=</span> <span class="token punctuation">(</span>stage<span class="token operator">:</span> <span class="token constant">FYGE</span><span class="token punctuation">.</span>Stage<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token constant">PIC_SIZE</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token comment">//图片尺寸，单位像素s</span>
    <span class="token keyword">const</span> <span class="token constant">GAP</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//位置间隔</span>

    <span class="token keyword">const</span> picture1 <span class="token operator">=</span> <span class="token constant">FYGE</span><span class="token punctuation">.</span>Sprite<span class="token punctuation">.</span><span class="token function">fromUrl</span><span class="token punctuation">(</span><span class="token string">&#39;//yun.duiba.com.cn/aurora/assets/cd16134f2544202ed5676adbd5114286aec44347.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>picture1<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token keyword">const</span> picture2 <span class="token operator">=</span> <span class="token constant">FYGE</span><span class="token punctuation">.</span>Sprite<span class="token punctuation">.</span><span class="token function">fromUrl</span><span class="token punctuation">(</span><span class="token string">&#39;//yun.duiba.com.cn/aurora/assets/c55dcd277542a6c3e983278ae5835d89848b9bd9.png&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>picture2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    picture2<span class="token punctuation">.</span>position<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">PIC_SIZE</span> <span class="token operator">+</span> <span class="token constant">GAP</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
 
    <span class="token comment">//鼠标按下起始点</span>
    <span class="token keyword">let</span> startPoint<span class="token punctuation">;</span>
    <span class="token comment">//图片起始位置</span>
    <span class="token keyword">let</span> currentPictureOrigin<span class="token punctuation">;</span>
 
    <span class="token keyword">const</span> <span class="token function-variable function">onStageMove</span> <span class="token operator">=</span> <span class="token punctuation">(</span>currentPicture<span class="token operator">:</span> <span class="token constant">FYGE</span><span class="token punctuation">.</span>Sprite<span class="token punctuation">,</span> event<span class="token operator">:</span> <span class="token constant">FYGE</span><span class="token punctuation">.</span>MouseEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//鼠标当前位置</span>
        <span class="token keyword">const</span> currentPoint <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> event<span class="token punctuation">.</span>stageX<span class="token punctuation">,</span> y<span class="token operator">:</span> event<span class="token punctuation">.</span>stageY <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">//鼠标按下点到鼠标当前点的偏移量</span>
        <span class="token keyword">let</span> mouseOffsetX <span class="token operator">=</span> currentPoint<span class="token punctuation">.</span>x <span class="token operator">-</span> startPoint<span class="token punctuation">.</span>x<span class="token punctuation">;</span>
        <span class="token keyword">let</span> mouseOffsetY <span class="token operator">=</span> currentPoint<span class="token punctuation">.</span>y <span class="token operator">-</span> startPoint<span class="token punctuation">.</span>y<span class="token punctuation">;</span>
 
        currentPicture<span class="token punctuation">.</span>x <span class="token operator">=</span> currentPictureOrigin<span class="token punctuation">.</span>x <span class="token operator">+</span> mouseOffsetX<span class="token punctuation">;</span>
        currentPicture<span class="token punctuation">.</span>y <span class="token operator">=</span> currentPictureOrigin<span class="token punctuation">.</span>y <span class="token operator">+</span> mouseOffsetY<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">const</span> <span class="token function-variable function">onMouseUp_pic</span> <span class="token operator">=</span> <span class="token punctuation">(</span>onStageMoveBinded<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//鼠标抬起后应该移出舞台移动事件，否则会重复添加事件</span>
        stage<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token constant">FYGE</span><span class="token punctuation">.</span>MouseEvent<span class="token punctuation">.</span><span class="token constant">MOUSE_MOVE</span><span class="token punctuation">,</span> onStageMoveBinded<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token keyword">const</span> <span class="token function-variable function">onMouseDown_pic</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token constant">FYGE</span><span class="token punctuation">.</span>MouseEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> currentPicture <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
        <span class="token keyword">const</span> onStageMoveBinded <span class="token operator">=</span> <span class="token function">onStageMove</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> currentPicture<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//图片鼠标弹起事件，事件触发一次即移除，否则会重复添加鼠标弹起事件</span>
        currentPicture<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token constant">FYGE</span><span class="token punctuation">.</span>MouseEvent<span class="token punctuation">.</span><span class="token constant">MOUSE_UP</span><span class="token punctuation">,</span> <span class="token function">onMouseUp_pic</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> onStageMoveBinded<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//添加舞台移动事件，鼠标移动即触发</span>
        <span class="token comment">//FYGE.MouseEvent.MOUSE_MOVE 会在鼠标移动过程中触发</span>
        stage<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token constant">FYGE</span><span class="token punctuation">.</span>MouseEvent<span class="token punctuation">.</span><span class="token constant">MOUSE_MOVE</span><span class="token punctuation">,</span> onStageMoveBinded<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 
        <span class="token comment">//event事件对象</span>
        <span class="token comment">//event.stageX，event.stageY当前鼠标在舞台的位置</span>
        startPoint <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> event<span class="token punctuation">.</span>stageX<span class="token punctuation">,</span> y<span class="token operator">:</span> event<span class="token punctuation">.</span>stageY <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
        currentPictureOrigin <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">:</span> currentPicture<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token operator">:</span> currentPicture<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">;</span>
 
        stage<span class="token punctuation">.</span><span class="token function">addChildAt</span><span class="token punctuation">(</span>currentPicture<span class="token punctuation">,</span> stage<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
 
    <span class="token comment">//增加鼠标按下事件</span>
    picture1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token constant">FYGE</span><span class="token punctuation">.</span>MouseEvent<span class="token punctuation">.</span><span class="token constant">MOUSE_DOWN</span><span class="token punctuation">,</span> onMouseDown_pic<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    picture2<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token constant">FYGE</span><span class="token punctuation">.</span>MouseEvent<span class="token punctuation">.</span><span class="token constant">MOUSE_DOWN</span><span class="token punctuation">,</span> onMouseDown_pic<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有两个细节要注意。</p><p>其一，很多人希望用全局变量来保存当前图片的对象，但是全局变量多了不是一件好事。因为当前操作图片是一个临时数据，我们可以通过bind方法来避免全局变量的创建。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> currentPicture <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span><span class="token comment">//当前操作图片是一个临时数据</span>
<span class="token keyword">const</span> onStageMoveBinded <span class="token operator">=</span> <span class="token function">onStageMove</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> currentPicture<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//currentPicture当前图片</span>
<span class="token keyword">const</span> <span class="token function-variable function">onStageMove</span> <span class="token operator">=</span> <span class="token punctuation">(</span>currentPicture<span class="token operator">:</span> <span class="token constant">FYGE</span><span class="token punctuation">.</span>Sprite<span class="token punctuation">,</span> event<span class="token operator">:</span> <span class="token constant">FYGE</span><span class="token punctuation">.</span>MouseEvent<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token comment">//处理当前图片</span>
<span class="token punctuation">}</span>
<span class="token function">其二，我们预期当前操作的图片应该处于舞台最上层。所以当鼠标按下时，应该将当前操作图片通过addChildAt方法</span><span class="token punctuation">(</span><span class="token constant">API</span>在这<span class="token punctuation">)</span>立刻置于容器最上层。

还有一种简写方式：addChild。

stage<span class="token punctuation">.</span><span class="token function">addChildAt</span><span class="token punctuation">(</span>currentPicture<span class="token punctuation">,</span> stage<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//or 简写为</span>
stage<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>currentPicture<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多图拖动源码仓库：<a href="http://gitlab2.dui88.com/fyge/puzzle/tree/multi-drag"></a></p><p>多图拖动在线演示：<a href="http://duiba.oss-cn-hangzhou.aliyuncs.com/db_games/fyge/puzzle-multi-drag/index.html"></a></p><p>代码设计思想</p><p>代码分离的概念可以随处可见，vue就是如此，分离使得可维护性变强。</p><p>一般我们将抽象数据（游戏逻辑数据）和视图数据分离开来，这样方便数据检索和处理。</p><p>数据结构设计 好的数据结构设计会使得我们事倍功半。</p><p>数据抽象 我们打算用一维数组来保存拼图碎片ID数据。为什么要用一维数组，而不是二维数组？一维数组会不太好理解，但是处理数据方便、代码简洁、可读性强。二维数组理解容易，但数据处理比较麻烦。</p><p>我们设置MAX_COL为拼图地图的宽度，MAX_ROW为拼图地图的高度。那么初始的图片数据就应该是[0,1,2,3 ..... MAX_COL * MAX_ROW]，把数组的每一项作为图片的ID。</p><p>假设MAX_COL * MAX_ROW=3*3，那么初始数据是[0,1,2,3,4,5,6,7,8]。</p><p>创建静态数据 我们可以用一个fill函数来创建这个初始的游戏数据，这个数据是静态的，不会改变。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">fill</span> <span class="token operator">=</span> <span class="token punctuation">(</span>size<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token constant">INIT_DATA</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token constant">MAX_COL</span> <span class="token operator">*</span> <span class="token constant">MAX_ROW</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建初始数据</span>
有了初始数据之后，我们便可以创建碎片显示对象列表了。这也是一个静态数据，不会改变。

<span class="token keyword">const</span> <span class="token constant">PIC_DISPLAY_LIST</span> <span class="token operator">=</span> <span class="token constant">INIT_DATA</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>data <span class="token operator">=&gt;</span> <span class="token constant">FYGE</span><span class="token punctuation">.</span>Sprite<span class="token punctuation">.</span><span class="token function">fromUrl</span><span class="token punctuation">(</span><span class="token constant">PIC_URLS</span><span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//图片视图数据（列表）</span>
然后我们就可以方便地通过碎片显示对象来反向获取碎片的<span class="token constant">ID</span>

<span class="token keyword">const</span> <span class="token function-variable function">getPicDisplayById</span> <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">PIC_DISPLAY_LIST</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//获取视图数据方法</span>
创建动态数据
我们创建gamedata变量来存储动态的游戏数据。打乱之后可能是这样<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>。

<span class="token comment">//我们创建gamedata作为当前的游戏数据</span>
<span class="token keyword">let</span> gamedata <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token constant">INIT_DATA</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//深拷贝</span>
gamedata<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//图片打乱,shuffle方法见下文</span>
维护动态数据
那么当图片交换之后，此数据也要做响应变化：在数组中交换拖动和落下碎片的<span class="token constant">ID</span>。这样交换图片，只需要交换数组的两个位置。

<span class="token function">swap</span><span class="token punctuation">(</span>currentPicIndex<span class="token punctuation">,</span> dropIndex<span class="token punctuation">,</span> gamedata<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//currentPicIndex拖动碎片ID在gamedata中的索引，dropIndex落下碎片的ID在gamedata中的索引。swap方法见下文。</span>
我们可以方便获取currentPicIndex和dropIndex：

<span class="token keyword">const</span> currentPicId <span class="token operator">=</span> <span class="token function">getPicId</span><span class="token punctuation">(</span>currentPic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//currentPic未拖动碎片的显示对象</span>
<span class="token keyword">const</span> currentPicIndex <span class="token operator">=</span> gamedata<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>currentPicId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//假如我们知道落下碎片所在的行row和列col，我们就能用convertRowColToIndex方法快速获取dropIndex</span>
<span class="token keyword">const</span> dropIndex <span class="token operator">=</span> <span class="token function">convertRowColToIndex</span><span class="token punctuation">(</span>dropRow<span class="token punctuation">,</span> dropCol<span class="token punctuation">,</span> <span class="token constant">MAX_COL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//convertRowColToIndex方法见下文</span>
游戏胜利
当数组恢复<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>游戏便胜利了。我们通过判断<span class="token constant">INIT_DATA</span>和gamedata是否相同来判定游戏是否胜利。

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token constant">INIT_DATA</span><span class="token punctuation">,</span> gamedata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//我们通过判断INIT_DATA和gamedata是否相同来判定游戏是否胜利。</span>
    <span class="token comment">//哈哈，赢了</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，你应该感受到了，设计用一维数组来保存游戏数据，会使得数据处理非常方便，代码可读性也很高。（你可以用二维数组改写后做对比）</p><p>算法核心 将游戏数据数组的index转化为图片的row和col</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token function-variable function">convertIndexToRowCol</span> <span class="token operator">=</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> maxCol<span class="token punctuation">,</span> maxRow<span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">const</span> col <span class="token operator">=</span> index <span class="token operator">%</span> maxCol<span class="token punctuation">;</span>
    <span class="token keyword">const</span> row <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>index <span class="token operator">/</span> maxRow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">{</span>col<span class="token punctuation">,</span> row<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
将一组row和col转化为游戏数据数组的index
<span class="token keyword">function</span> <span class="token function">convertRowColToIndex</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> maxCol<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//如果是用一维数组存储图片，那么可以用这个方法来将col和row转化成index索引</span>
    <span class="token keyword">let</span> index<span class="token punctuation">;</span>
    index <span class="token operator">=</span> row <span class="token operator">*</span>maxCol <span class="token operator">+</span> col<span class="token punctuation">;</span>
    <span class="token keyword">return</span> index
<span class="token punctuation">}</span>
获取所落下碎片行列
<span class="token comment">//picX，picY为图片坐标</span>
<span class="token keyword">const</span> col <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>picX <span class="token operator">/</span> <span class="token constant">MAX_COL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> row <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>picY <span class="token operator">/</span> <span class="token constant">MAX_ROW</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
打乱数组
<span class="token builtin">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">shuffle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> m <span class="token operator">=</span> array<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
        t<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span> m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t <span class="token operator">=</span> array<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>
        array<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> array<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//注意此方法会修改原数组，下面方法可以做深拷贝。</span>
<span class="token comment">//我们创建gamedata作为当前的游戏数据</span>
<span class="token keyword">let</span> gamedata <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token constant">INIT_DATA</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//深拷贝</span>
gamedata<span class="token punctuation">.</span><span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//图片打乱</span>
判断数组相等
我们通过判断<span class="token constant">INIT_DATA</span>和gamedata是否相同来判定游戏是否胜利。

<span class="token keyword">const</span> <span class="token function-variable function">equalTo</span> <span class="token operator">=</span> <span class="token punctuation">(</span>array1<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> array2<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>array1<span class="token punctuation">.</span>length <span class="token operator">!=</span> array1<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> len <span class="token operator">=</span> array1<span class="token punctuation">.</span>length <span class="token operator">||</span> array1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> a <span class="token operator">=</span> array1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> b <span class="token operator">=</span> array2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token comment">//判断数组是否相等</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">equalTo</span><span class="token punctuation">(</span><span class="token constant">INIT_DATA</span><span class="token punctuation">,</span> gamedata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
    <span class="token comment">//我们通过判断INIT_DATA和gamedata是否相同来判定游戏是否胜利。</span>
    <span class="token function">showToast</span><span class="token punctuation">(</span><span class="token string">&#39;哈哈，赢了&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
数组数据交换
<span class="token comment">//数组元素交换</span>
<span class="token keyword">const</span> <span class="token function-variable function">swap</span> <span class="token operator">=</span> <span class="token punctuation">(</span>index1<span class="token punctuation">,</span> index2<span class="token punctuation">,</span> list<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ele1 <span class="token operator">=</span> list<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> ele2 <span class="token operator">=</span> list<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">;</span>
    list<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> ele2<span class="token punctuation">;</span>
    list<span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">=</span> ele1<span class="token punctuation">;</span>
    <span class="token keyword">return</span> list<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23),M={href:"http://gitlab2.dui88.com/fyge/puzzle/tree/puzzle",target:"_blank",rel:"noopener noreferrer"},O={href:"http://duiba.oss-cn-hangzhou.aliyuncs.com/db_games/fyge/puzzle/index.html",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,"进一步提升代码可维护性 整体代码看下。可读性还是有待优化，为什么，因为他是过程式编程。可以考虑面向对象oop:",-1),I=n("p",null,"面向对象方法，把相关的数据和方法组织为一个整体来看待，从更高的层次来进行系统建模，更贴近事物的自然运行模式。",-1),P=n("p",null,"初学者可以了解下OOP基础概念和语法:",-1),F={href:"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object-oriented_JS",target:"_blank",rel:"noopener noreferrer"},S={href:"https://es6.ruanyifeng.com/#docs/class",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://es6.ruanyifeng.com/#docs/class-extends",target:"_blank",rel:"noopener noreferrer"},G=n("h2",{id:"oop",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#oop","aria-hidden":"true"},"#"),s(" OOP")],-1),z=n("p",null,"本文基于webpack + typescript工程，理解负担更轻，可移植性更强：使用 webpack 构建TypeScript应用",-1),T=n("p",null,"将用两篇文章来讲述如何开发一个高可维护性的拼图游戏：",-1),A=n("p",null,"1、拼图解析 2、OOP的拼图游戏 开场 首先，我们会将拼图游戏用面向对象的设计原则做新的设计，然后再OOP的方式改写。这一步的目的是为了实现更好的可维护性。",-1),C=n("p",null,"然后，为了验证我们的设计的优越性，会对需求做一个变更，查看代码维护的成本。",-1),N=n("p",null,"开始教程前，先把变更后的游戏贴一下。",-1),q=n("p",null,"另外，建议先将相应的代码拉取下来作为阅读参考。",-1),U={href:"http://gitlab2.dui88.com/fyge/puzzle/tree/oop",target:"_blank",rel:"noopener noreferrer"},B={href:"http://gitlab2.dui88.com/fyge/puzzle/tree/oop2",target:"_blank",rel:"noopener noreferrer"},L=n("p",null,"如果你是OOP的初学者 先看看基础概念和语法",-1),R={href:"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object-oriented_JS",target:"_blank",rel:"noopener noreferrer"},X={href:"https://es6.ruanyifeng.com/#docs/class",target:"_blank",rel:"noopener noreferrer"},J={href:"https://es6.ruanyifeng.com/#docs/class-extends",target:"_blank",rel:"noopener noreferrer"},V=p(`<p><a href="https://www.typescriptlang.org/">文档</a> 设计原则 OO设计第一大原则就是单一职责原则。它的定义是：</p><p>一个对象应该只包含单一的职责,并且该职责被完整地封装在一个类中。 单一职责原则是实现高内聚、低耦合的指导方针。</p><p>接下来我们将会把游戏功能拆解，并按照这个原则进行类的设计。</p><p>拖放（Drag 和 Drop） 拖放（Drag 和 Drop）是拼图游戏的核心功能，同时它也是很常见的特性，DOM中也有标准化的拖放特性，这次我们自己在FYGE实现一个拖放功能。</p><p>我们将拖放抽象成为几个类:</p><p>DragDropable 实现了可拖放的对象，包括图片移动、作为Drop对象时接收拖动对象的行为。图片碎片需要继承这个类来获取拖放功能。 DragDropManager 用于管理所有的拖放对象，给图片碎片增加拖放行为。即使继承了DragDropable，不添加到DragDropManager也无法进行拖放操作。另外他还提供事件相关的事件，拖放检测的实现代码也在这里。 DragDropable类 这里要特别说明，一般我们私有属性前加一个下划线符号，这样能够更快速区分公有或者私有属性，提升代码可读性。</p><p>图片拖动开始的起始位置 public originPos : FYGE.Point 开始拖动的时候会更新这个位置。很有用的属性。</p><p>鼠标按下的起始点private _startPoint: FYGE.Point 方便移动过程中更新拖动对象的位置。</p><p>位置计算公式：</p><p>鼠标偏移 = 鼠标当前位置 - 鼠标按下的位置 对象当前位置 = 对象原始位置originPos + 鼠标偏移。 获取放下的点 protected getDropPoint() 这个点用于检查计算掉落对象。在拼图游戏里，我们一般会把图片碎片的中心点或者鼠标当前位置作为掉落的点，这样体验比较好。</p><p>不同的拖放功能要求不一样，所以我们要求拖动对象的子类必须要重写这个方法。</p><p>触发落下事件处理函数 public onDrop(drop: DragDropable) 子类必须重写此方法。</p><p>拖动结束处理函数 public onDragEnd(drop: DragDropable) 子类必须重写此方法。</p><p>DragDropManager类 给拖放对象添加行为 public add(item: DragDropable) 在拼图游戏中，图片碎片对象即使继承了DragDropable，不添加到DragDropManager也无法进行拖放操作。</p><p>private onDisplayItemDrop(e: FYGE.Event) 私有方法，用于处理拖放检测。关键代码如下：</p><p>const drop: DragDropable = dragParent.hitTestPoint(new FYGE.Point(e.data.x / 2, e.data.y / 2), true); Fragment类 这是图片碎片类，继承DragDropable。这样你可以更加方便的获取dropId和dragId，以便交换数据。对比下代码看看。</p><p>碎片ID private _ID: number 储图片碎片的ID。</p><p>获取放下检测点 protected getDropPoint(event: FYGE.MouseEvent) 这里设置的是图片的中心点位置，你设置成鼠标按下的位置体验也ok。</p><p>处理放入事件 onDrop = (drag: DragDropable): void 当碎片作为drop对象时，如果有拖动对象拖入，那么需要交换位置。</p><p>拖动结束 public onDragEnd(drop: DragDropable) 当碎片作为拖动对象时，拖动结束的时候，如果没有拖入其他对象，那么要回原位置。</p><p>Game类 初始化拖放 private _initDragDrop() 主要注册游戏拖放事件</p><p>处理开始拖放事件 private onDragStart(e: FYGE.Event) 事件触发时，我们要把当前拖动图片置于最上层。</p><p>处理拖放结束事件 private onDragEnd(e: FYGE.Event) 拖放结束后要进行图片视图以及数据的交换。</p><p>OO设计总结 细心人会发现，DragDropable、DragDropEvent、DragDropManager这几个类并不依赖游戏相关的类，这样我们就可以方便地将拖放功能封装成代码库，以便其他项目使用。</p><p>同时，高内聚低耦合这个OO设计理念的体现，这使得我们在修改模块A的时候不会影响到模块B的功能。</p><p>重构完毕 这是完整的代码 <a href="http://gitlab2.dui88.com/fyge/puzzle/tree/oop">点这里跳转</a></p><p>需求变更 为了验证设计思想，我们对游戏需求做下变更：</p><p>我们将游戏分为两个区域：</p><p>一是如前面描述的拼图区，拼图操作在此进行。但是此区域初始状态是空白的。 二是图片缩略图列表区，这里存放所有图片碎片的小图。小图必须拖到拼图区才能进行拼图。 考虑到现在小图和大图的功能相似，所以我们抽象出他们的父类 BaseFragment。因为BaseFragment和原Fragment功能相同（位置交换、唯一标识、落空归位），其实只需要原来Fragment类直接改名即可。</p><p>大图类不变，还是Fragment。增加一个小图类Thumbnail。下面具体描述下各个类的功能。</p><p>拖放管理类DragDropManager的变化 当元素移除舞台的时候，我们需要删除相关的事件，以便更好地内存回收。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//初始化拖放对象事件</span>
<span class="token keyword">public</span> <span class="token function">add</span><span class="token punctuation">(</span>item<span class="token operator">:</span> DragDropable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    item<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DROP&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onDisplayItemDrop<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
    item<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token constant">FYGE</span><span class="token punctuation">.</span>MouseEvent<span class="token punctuation">.</span><span class="token constant">MOUSE_DOWN</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onMouseDown<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
    item<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token constant">FYGE</span><span class="token punctuation">.</span>Event<span class="token punctuation">.</span><span class="token constant">REMOVED_FROM_STAGE</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>remove<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token punctuation">(</span>event<span class="token operator">:</span><span class="token constant">FYGE</span><span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> item <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>
    item<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;DROP&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onDisplayItemDrop<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
    item<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token constant">FYGE</span><span class="token punctuation">.</span>MouseEvent<span class="token punctuation">.</span><span class="token constant">MOUSE_DOWN</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>onMouseDown<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>小图类Thumbnail 考虑到小图不接受任何掉落事件，所以需要重写Thumbnail类的onDrop方法，并清空方法内容。只需要简单一行代码即可，而且不需要更改其他模块功能（我们只改了子类功能，并不影响父类，也不影响大图类Fragment）。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>    onDrop <span class="token operator">=</span> <span class="token punctuation">(</span>drag<span class="token operator">:</span> DragDropable<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，考虑到，在小图拖放结束后，即使落入了其他小图，也不发生变化，那么我们需要改动一下onDragEnd方法：只有落入对象是空或者是小图才会归位。</p><p>这里我们需要用到instanceof运算符来判断拖入变量的是大图还是小图。</p><p>另外，在拖入大图的时候，需要移除掉小图对象。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//</span>
<span class="token keyword">public</span> <span class="token function">onDragEnd</span><span class="token punctuation">(</span>drop<span class="token operator">:</span> DragDropable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>drop <span class="token operator">||</span> drop <span class="token keyword">instanceof</span> <span class="token class-name">Thumbnail</span><span class="token punctuation">)</span>
            <span class="token constant">FYGE</span><span class="token punctuation">.</span>Tween<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>originPos<span class="token punctuation">.</span>x<span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>originPos<span class="token punctuation">.</span>y <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>drop <span class="token keyword">instanceof</span> <span class="token class-name">Fragment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;大图来了，然后，就没然后了&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，你是否发现了，好的设计会让你的代码复用率高，修改代码量变少，功能影响变小。</p><p>大图类Fragment 初始的大图是空白状态，我们需要给他添加一个白色背景。并且还要给他一个初始的空白状态的ID。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">private</span> _initialID<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span> 
<span class="token keyword">get</span> <span class="token function">initialID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">number</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_initialID  <span class="token punctuation">}</span> 
<span class="token keyword">set</span> <span class="token function">initialID</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_initialID <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token keyword">private</span> <span class="token function">_createBg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> bg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">FYGE</span></span><span class="token punctuation">.</span><span class="token function">Graphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bg<span class="token punctuation">.</span><span class="token function">beginFill</span><span class="token punctuation">(</span><span class="token number">0xffffff</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bg<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">FRAGMENT_SIZE</span><span class="token punctuation">,</span> <span class="token constant">FRAGMENT_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bg<span class="token punctuation">.</span><span class="token function">endFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_bg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>bg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>考虑到缩略图拖入大图后需要重新设置大图信息，所以我们需要修改大图的onDrop方法。</p><p>这里要考虑两种拖放情况：</p><p>大图拖入大图 小图拖入大图 由于大图初始状态是空白背景，我们需要创建一个空白背景来代理onDrop方法。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">//hi</span>
<span class="token keyword">class</span> <span class="token class-name">Background</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">FYGE</span></span><span class="token punctuation">.</span>Graphics <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">beginFill</span><span class="token punctuation">(</span><span class="token number">0xffffff</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">FRAGMENT_SIZE</span><span class="token punctuation">,</span> <span class="token constant">FRAGMENT_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">endFill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    onDrop <span class="token operator">=</span> <span class="token punctuation">(</span>drag<span class="token operator">:</span> DragDropable<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">removeBg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">onDrop</span><span class="token punctuation">(</span>drag<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理掉落onDrop = (drag: DragDropable) 两件事：</p><p>设置ID 同步纹理 很简单。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>onDrop <span class="token operator">=</span> <span class="token punctuation">(</span>drag<span class="token operator">:</span> DragDropable<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> thumb <span class="token operator">=</span> drag <span class="token keyword">as</span> Thumbnail<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>texture <span class="token operator">=</span> drag<span class="token punctuation">.</span>texture<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_ID <span class="token operator">=</span> thumb<span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新的Game类 修改private _createGamedata() 初始数据应该是个空数组。</p><p>创建大图列表 private _createFragmentList() 特别说明，空白的大图不包含ID，所以没有作ID设置。但是他有一个初始的initialID。</p><p>处理拖动结束逻辑 private onDragEnd(e: FYGE.Event) 稍微做一下处理即可</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">private</span> <span class="token function">onDragEnd</span><span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token constant">FYGE</span><span class="token punctuation">.</span>Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> drag<span class="token operator">:</span> BaseFragment <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>drag<span class="token punctuation">;</span>
        <span class="token keyword">const</span> drop<span class="token operator">:</span> BaseFragment <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">.</span>drop<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>drop <span class="token keyword">instanceof</span> <span class="token class-name">Thumbnail</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;大图拖小图，小图拖小图，无视&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//大图拖大图</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>drag <span class="token keyword">instanceof</span> <span class="token class-name">Fragment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;大图拖大图&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>drag <span class="token keyword">instanceof</span> <span class="token class-name">Thumbnail</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//小图拖大图</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>drop <span class="token operator">||</span> drop<span class="token punctuation">.</span><span class="token constant">ID</span> <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//这个位置已经有图了</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>_gamedata<span class="token punctuation">[</span><span class="token punctuation">(</span>drop <span class="token keyword">as</span> Fragment<span class="token punctuation">)</span><span class="token punctuation">.</span>initialID<span class="token punctuation">]</span> <span class="token operator">=</span> drag<span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;图片数据&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_gamedata<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>i <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>drop <span class="token operator">&amp;&amp;</span> drop <span class="token keyword">instanceof</span> <span class="token class-name">Fragment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">swapElement</span><span class="token punctuation">(</span>drag<span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">,</span> drop<span class="token punctuation">.</span><span class="token constant">ID</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_gamedata<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;赢了&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,52),W={href:"http://gitlab2.dui88.com/fyge/puzzle/tree/oop2",target:"_blank",rel:"noopener noreferrer"},j=p(`<p>总结 最后，你会发现，我们并没有做大的变更，便实现了一个复杂的需求的变更。</p><p>事实证明，我们的设计是有着高可维护性的。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>X-UA-Compatible<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>IE=edge<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>canvas</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>canvas<span class="token punctuation">&quot;</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>600<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>600<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>canvas</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./clock.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function Z(K,Q){const a=o("ExternalLinkIcon");return c(),l("div",null,[r,k,d,v,m,i(" ``` html "),b,g,y,f,n("p",null,[s("实现需要用到鼠标（触摸）事件API FYGE.MouseEvent，FYGE鼠标事件API的设计是参考DOM（"),n("a",h,[s("https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent"),t(a)]),s("），二者用法相似。")]),w,n("p",null,[s("拖动源码仓库："),n("a",_,[s("http://gitlab2.dui88.com/fyge/puzzle/tree/drag"),t(a)])]),n("p",null,[s("拖动在线演示："),n("a",E,[s("http://duiba.oss-cn-hangzhou.aliyuncs.com/db_games/fyge/puzzle-drag/index.html"),t(a)])]),D,n("p",null,[s("最终代码 游戏源码仓库："),n("a",M,[s("http://gitlab2.dui88.com/fyge/puzzle/tree/puzzle"),t(a)])]),n("p",null,[s("游戏在线演示："),n("a",O,[s("http://duiba.oss-cn-hangzhou.aliyuncs.com/db_games/fyge/puzzle/index.html"),t(a)])]),x,I,P,n("p",null,[s("适合初学者的JavaScript面向对象 "),n("a",F,[s("https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object-oriented_JS"),t(a)]),s(" Class 的基本语法 "),n("a",S,[s("https://es6.ruanyifeng.com/#docs/class"),t(a)])]),n("p",null,[s("Class 的继承 "),n("a",Y,[s("https://es6.ruanyifeng.com/#docs/class-extends"),t(a)])]),G,z,T,A,C,N,q,n("p",null,[s("这是需求变更前的代码："),n("a",U,[s("http://gitlab2.dui88.com/fyge/puzzle/tree/oop"),t(a)]),s("。")]),n("p",null,[s("这是需求变更后的代码："),n("a",B,[s("http://gitlab2.dui88.com/fyge/puzzle/tree/oop2"),t(a)]),s(" 。")]),L,n("p",null,[s("适合初学者的JavaScript面向对象 "),n("a",R,[s("https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object-oriented_JS"),t(a)]),s(" Class 的基本语法 "),n("a",X,[s("https://es6.ruanyifeng.com/#docs/class"),t(a)]),s(" Class 的继承 "),n("a",J,[s("https://es6.ruanyifeng.com/#docs/class-extends"),t(a)]),s(" 另外OOP特性很多是建立在TypeScript语言之上的，所以你需要有这种语言基础。文档参考：")]),V,n("p",null,[s("完整代码 "),n("a",W,[s("http://gitlab2.dui88.com/fyge/puzzle/tree/oop2"),t(a)])]),j])}const $=e(u,[["render",Z],["__file","拼图游戏.html.vue"]]);export{$ as default};
